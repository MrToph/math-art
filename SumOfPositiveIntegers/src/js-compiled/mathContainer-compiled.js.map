{"version":3,"sources":["../js/mathContainer.jsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;IAAM;;;AACF,aADE,aACF,CAAY,OAAZ,EAAqB;8BADnB,eACmB;;2EADnB,2BACmB;;AAEjB,cAAK,KAAL,GAAa,IAAb,CAFiB;AAGjB,cAAK,MAAL,GAAc,GAAd,CAHiB;;AAKjB,cAAK,WAAL,GAAmB,CAAnB;;AALiB,aAOjB,CAAK,OAAL,GAAe,OAAf,CAPiB;;AASjB,cAAK,OAAL,GAAe,CAAf,CATiB;AAUjB,cAAK,YAAL,GAAoB,EAApB,CAViB;;AAYjB,gBAAQ,GAAR,CAAY,KAAZ,CAAkB,YAAM;AACtB,kBAAK,GAAL,GAAW,QAAQ,GAAR,CAAY,SAAZ,CAAsB,eAAtB,EAAuC,CAAvC,CAAX,CADsB;SAAN,EAGlB,YAAM;AAAC,kBAAK,MAAL,CAAY,CAAZ,EAAD;SAAN,CAHA,CAZiB;;KAArB;;iBADE;;iCAoB6B;gBAAxB,6DAAO,KAAK,WAAL,gBAAiB;;AAC3B,gBAAI,YAAY,KAAK,qBAAL,EAAZ,CADuB;AAE3B,gBAAG,cAAc,KAAK,YAAL,EAAkB;AAC/B,qBAAK,YAAL,GAAoB,SAApB,CAD+B;AAE/B,wBAAQ,GAAR,CAAY,KAAZ,CAAkB,IAAlB,CAAuB,CAAC,MAAD,EAAS,KAAK,GAAL,EAAU,SAAnB,CAAvB,EAF+B;aAAnC;;;;gDAMmB;AACnB,gBAAI,YAAY,OAAO,GAAP,iBAAZ,CADe;AAGnB,gBAAI,OAAO,EAAP,CAHe;AAInB,oBAAO,KAAK,WAAL;AACH,qBAAK,CAAL;AACI,2BAAO,OAAO,GAAP,kBAAP,CADJ;AAEI,0BAFJ;AADJ,qBAIS,CAAL,CAJJ;AAKI,qBAAK,CAAL;AACI,2BAAO,OAAO,GAAP,kBAAP,CADJ;AALJ,aAJmB;AAYnB,mBAAU,0BAAqB,UAA/B,CAZmB;;;;WA5BrB;EAAsB","file":"mathContainer-compiled.js","sourcesContent":["class MathContainer extends ISteppable{\r\n    constructor(element) {\r\n        super();\r\n        this.width = 1200;\r\n        this.height = 500;\r\n\r\n        this.currentStep = 0;\r\n        // this.colors = [\"#ff3232\", \"#008000\", \"#3232ff\", \"#ffa500\", \"#8A2BE2\"];\r\n        this.element = element;\r\n\r\n        this.maxStep = 2;\r\n        this.oldInnerHTML = \"\";\r\n\r\n        MathJax.Hub.Queue(() => {\r\n          this.jax = MathJax.Hub.getAllJax(\"mathContainer\")[0];\r\n        },\r\n        () => {this.redraw(0);});\r\n    }\r\n\r\n\r\n    redraw(step = this.currentStep){\r\n        let innerHTML = this.getTextForCurrentStep();\r\n        if(innerHTML !== this.oldInnerHTML){\r\n            this.oldInnerHTML = innerHTML;\r\n            MathJax.Hub.queue.Push([\"Text\", this.jax, innerHTML]);\r\n        }\r\n    }\r\n\r\n    getTextForCurrentStep(){\r\n        let colorDefs = String.raw`\\definecolor{colorRed}{RGB}{255,50,50}\\definecolor{colorGreen}{RGB}{50,205,50}\r\n                                    \\definecolor{colorBlue}{RGB}{50,50,255}\\definecolor{colorOrange}{RGB}{255,165,0}\\definecolor{colorPurple}{RGB}{138,43,226}`;\r\n        let text = \"\";\r\n        switch(this.currentStep){\r\n            case 0:\r\n                text = String.raw`2(\\textcolor{colorRed}{1} + \\textcolor{colorBlue}{2} + \\textcolor{colorGreen}{3} + \\textcolor{colorOrange}{4} + \\ldots + \\textcolor{colorPurple}{n})`;\r\n                break;\r\n            case 1:\r\n            case 2:\r\n                text = String.raw`2(1 + 2 + 3 + 4 + \\ldots + n) = n (n+1)`;\r\n        }\r\n        return `${colorDefs} \\\\smash{${text}}`;\r\n    }\r\n}\r\n"]}